<?xml version="1.0" encoding="UTF-8"?><testrun name="TestMatrixPublic" project="16" tests="1" started="1" failures="0" errors="1" ignored="0">
  <testsuite name="tests.TestMatrixPublic" time="0.557" displayname="TestMatrixPublic" uniqueid="[engine:junit-vintage]/[runner:tests.TestMatrixPublic]">
    <testcase name="testc3" classname="tests.TestMatrixPublic" time="0.557" displayname="testc3" uniqueid="[engine:junit-vintage]/[runner:tests.TestMatrixPublic]/[test:testc3(tests.TestMatrixPublic)]">
      <error>java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1&#13;
	at tests.TestMatrixPublic.applyPlan(TestMatrixPublic.java:1066)&#13;
	at tests.TestMatrixPublic.testc3(TestMatrixPublic.java:281)&#13;
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)&#13;
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.base/java.lang.reflect.Method.invoke(Method.java:567)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)&#13;
	at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)&#13;
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)&#13;
	at java.base/java.lang.Thread.run(Thread.java:831)&#13;
&#13;
</error>
    </testcase>
  </testsuite>
</testrun>
